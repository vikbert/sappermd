<svelte:head>
  <title>Sapper project template</title>
</svelte:head>

# CarSales

## DevOps

## Coding Guideline

### header 3

#### header 4

##### header 5


# Business Solutions - Vertriebsportal

# Links

| Name| Uri |
| --- | --- |
| Vertriebsportal       | http://vertriebsportal.localhost |
| API                   | http://vertriebsportal.localhost/api/doc |
| Auctioneer API        | http://vertriebsportal.localhost/api/doc/auctioneer |
| Frontend Development  | http://vertriebsportal.localhost:8080 |
| MailCatcher           | http://vertriebsportal.localhost:1080 |

## Shortcut to start/reset the complete dev environment

There is a shortcut shell script named `run.sh` to simplify all the steps to start the complete dev environment.
In order to initially build your dev environment, just run:

    bash run.sh init

If you want to reset your existing dev environment and remove everything, including images, containers, dependencies,
just apply this command in the root location in project:

    bash run.sh reset

## Additional Commands

The above mentioned shell script also provides some additional commands. More details are available via help flag:

    bash run.sh --help

Start the containers:

```bash
docker-compose up -d
```

Install dependencies:
```bash
docker-compose exec php composer install
docker-compose run --rm node npm run download
docker-compose run --rm node npm run build
```

Check Logs:
```bash
docker-compose logs -ft
```

Initialize DB with fixtures
```
docker-compose exec php bin/console carsales:fixtures:load
```

### API
#### Documentation
The documentation is available under http://vertriebsportal.localhost/api/doc
- to get an authentication token use the `post /api/login` endpoint and copy the token from the response
- insert the generated token into `authorize` and all subsequent requests will contain the needed header inclusive token

See https://symfony.com/doc/current/bundles/NelmioApiDocBundle/index.html for further informations about how to document the api.

### Debugging
Open the PHPStorm project settings and navigate to `Languages & Frameworks > PHP > Servers`.
Add a new server:
**Host:** *vertriebsportal.localhost*
**Port:** *80*

Check the "Use path mappings" checkbox.
```
…/[projectRoot]/app => /var/www/app
…/[projectRoot]/app/public => /var/www/app/public
```

### PHP Code Quality Tools
Navigate to `Languages & Frameworks > PHP > Quality Tools`. Select the globally interpreter for CS-Fixer via the dropdown.
See confluence for setup instructions: https://www.secrz.de/confluence/display/CAR/Entwicklungsumgebung

Navigate to `Editor > Inspections > PHP > Quality Tools`. Activate the PHP CS Fixer validation.
Select custom in the Ruleset dropdown press the “…” button and enter the path to the ruleset `/opt/project/app/.php_cs`
(path inside of docker container)

### Javascript Code Quality Tools
Navigate to `Languages & Frameworks > Javascript > Quality Tools > ESLint`. Select eslint from `app/_frontend/node_modules` and set the config file to `app/_frontend/.eslintrc.js`. Now you can see eslint warnings in your IDE and fix them from the context menu.

### Static code analysis

We are using psalm for static code analysis. Docs: https://psalm.dev/docs/

Usage:
```bash
docker-compose exec php vendor/bin/psalm
```

### Testing

```
php vendor/bin/simple-phpunit
```
https://symfony.com/doc/current/testing.html

#### Use PHPUnit in PHPStorm

Before you start with the setup you should execute this command in your project root (not in the container): `docker-compose run --rm php vendor/bin/simple-phpunit`

See confluence for setup instructions to configure PHPUnit in PHPStorm: https://www.secrz.de/confluence/display/CAR/Entwicklungsumgebung

### Running behat Tests
Execute ```docker-compose exec php vendor/bin/behat``` to run all features in the `app/features` directory.

### Running JS Tests
Execute ```docker-compose run --rm node npm test``` to run all Jest Tests.

Execute ```docker-compose run --rm node npm test -- -u``` to run all Jest Tests and update Snapshots.

Execute ```docker-compose run --rm node npm test -- -t="Car Details"``` to run all Jest Tests with matching name in `describe()`.

Execute ```docker-compose run --rm node npm test -- --runTestsByPath components/__tests__/Breadcrumb.test.js``` to run Jest Tests in a specific file.

### Frontend Development
It's recommended to install the PHPStorm Plugin https://plugins.jetbrains.com/plugin/10113-react-snippets .
You should also import the `code_styles.xml` into PHPStorm and configure ESlint.

```bash
//install dependencies
docker-compose run --rm node npm run download

//production build (also used for Symfony-Page)
docker-compose run --rm node npm run build

//webpack-dev-server with hotreload -> http://vertriebsportal.localhost:8080
docker-compose run --rm --service-ports node npm start

//fix eslint errors
docker-compose run --rm node npm run build --fix //or use the PHPStorm ESlint Plugin
```

### Styleguide
A living styleguide is available at `/` after building the frontend with the `--styleguide` flag.
ATTENTION: The CarSales-App is not available then.
```
docker-compose run --rm node npm run build -- --styleguide
//or
docker-compose run --rm --service-ports node npm run devserver -- --styleguide
```

### Visual Code Configuration
1. You should have two extensions in visual code installed, to make eslint and formatting works as you work in phpstorm.

- Eslint <https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint/>
- Prettier <https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode/>


2. add these these lines to `settings.json` and restart the editor
```
      "files.autoSave": "off",
      "editor.formatOnSave": false,
      "eslint.trace.server": "messages",
      "eslint.autoFixOnSave": true
```

### Kibana / Logging Interface
In order to access the Logging UI, just open `http://vertriebsportal.localhost:5601` in your browser (it can take up to 2 or 3 minutes before Kibana is actually started).
When you open Kibana for the first time, you have to create an "index":
1. Click on the first link in the left sidebar navigation: "Discover"
2. Enter `filebeat-*` into the "Index pattern" field.
3. Click "Next step"
4. Select `@timestamp` from the "Time Filter field name" field
5. Click "Create index pattern"
5. Click on "Discover" in the sidebar again to view the log entries

### Random

1. To run commands on cf with all enabled modules, run
`$ HOME=$HOME/app source ./app/.profile.d/finalize_bp_env_vars.sh`

### SAP Import
```bash
bin/console car:import:sap features/testFiles/sap/sap_import_ok.csv
```

### BMW Import
```bash
bin/console car:import:bmw:xml features/testFiles/bmwImport/BMW_SharePoint_00000583.valid.xml
```

### Rollen zuweisen (QA Intern)

Auf QA Intern (https://carsales-qa.apps.eu03.stackit.schwarz) kannst du dir nach dem Login beliebige Rollen zuweisen.

1. Logge dich ein und ermittle über die Dev Tools Konsole deines Browsers den aktiven **Auth-Token**

2. Führe im Terminal den folgenden Befehl aus (XXXX mit Auth-Token ersetzen), um dir die Rollen *ROLE_B2B_DIRECT_MANAGER* und *ROLE_DISTRIBUTION_CHANNEL_ASSIGNMENT* zuzuweisen.

   ```bash
   curl -X POST "https://carsales-qa.apps.eu03.stackit.schwarz/api/authorization/mock/roles" -H "accept: application/json" -H "X-AUTH-TOKEN:XXXX“ -H "Content-Type: application/x-www-form-urlencoded" -d "roles=ROLE_USER,ROLE_B2B_DIRECT_MANAGER,ROLE_DISTRIBUTION_CHANNEL_ASSIGNMENT“
   ```

   Die folgenden Rollen sind kombinierbar (mit Komma trennen):

   | Rolle                                |
   | ------------------------------------ |
   | ROLE_AUCTIONEER                      |
   | ROLE_AUCTION_MANAGER                 |
   | ROLE_B2C_MANAGER                     |
   | ROLE_DAMAGE_MANAGER                  |
   | ROLE_B2B_DIRECT_MANAGER              |
   | ROLE_B2B_PROVISION_MANAGER           |
   | ROLE_DISTRIBUTION_CHANNEL_ASSIGNMENT |
   | ROLE_REVISOR                         |

3. Lade die Seite neu, um mit den neuen Rollen zu arbeiten.

### Rollen zuweisen (Lokal)

Lokal kannst du dir über die ApiDocs Rollen zuweisen:

1. Logge dich normal ein
2. Öffne im gleichen Browser die ApiDocs: http://vertriebsportal.localhost/api/doc
3. Starte einen POST-Request an /api/authorization/mock/roles, in dem du unter *roles* mindestens eine der o.g. Rollen angibst.
